<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>悠远的苍穹</title><link href="//tooisorahe.com/" rel="alternate"></link><link href="//tooisorahe.com/feeds/all-zhs.atom.xml" rel="self"></link><id>//tooisorahe.com/</id><updated>2020-05-28T09:00:00+00:00</updated><entry><title>肖战，永远滴神！</title><link href="//tooisorahe.com/xz666.html" rel="alternate"></link><published>2020-05-28T09:00:00+00:00</published><updated>2020-05-28T09:00:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2020-05-28:/xz666.html</id><summary type="html">&lt;p&gt;python课大作业的题目是爬任意一个网站，获取数据进行统计。我平时很少看电影，
就算看也不会特意去研究一部电影的评分和影评，电影的好与坏是非常主观的，只有
自己看过后才能得出结论，听风就是雨的行为实在是naive。&lt;/p&gt;
&lt;p&gt;我了解到的大多数人都是选择爬取诸如豆瓣、猫眼之类的影评或者书评网站，考虑到
上面提出的问题，这种类型的数据对我而言没有意义，就没有选择这类网站。正苦恼
于选择什么网站时，QQ上收到一张图片，内容大概是某群友跟肖战狂热粉丝的对线内
容。肖战这个名字，就算是不关注娱乐圈的我也是如雷贯耳，此人如今的名气甚至一
度超越身为2019年度之星的坤坤(当然是不好的方面)；想当年，坤坤靠一曲鸡你太美变态出道，
成为全网津津乐道的对象。而当今肖战则更胜一筹，个人实力什么的无所谓，只要粉
丝够多够无脑，我就是饭圈当之无愧的扛把子。&lt;/p&gt;
&lt;p&gt;本人亦有幸被肖战的粉丝 &lt;ruby&gt;&lt;rb&gt;临幸&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;攻击&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 过，其言语之粗鄙，其态度之恶劣，实在
是所有键盘侠的楷模。藉此次大作业的机会，我决定爬一爬肖战的微博，研究一下他
粉丝的构成。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;详细(实现具有时效性，一段时间后可能失效)&lt;/h2&gt;
&lt;p&gt;按照软件工程的说法，首先要对目标进行可行性分析(避免技术力不足造成的尴尬 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;python课大作业的题目是爬任意一个网站，获取数据进行统计。我平时很少看电影，
就算看也不会特意去研究一部电影的评分和影评，电影的好与坏是非常主观的，只有
自己看过后才能得出结论，听风就是雨的行为实在是naive。&lt;/p&gt;
&lt;p&gt;我了解到的大多数人都是选择爬取诸如豆瓣、猫眼之类的影评或者书评网站，考虑到
上面提出的问题，这种类型的数据对我而言没有意义，就没有选择这类网站。正苦恼
于选择什么网站时，QQ上收到一张图片，内容大概是某群友跟肖战狂热粉丝的对线内
容。肖战这个名字，就算是不关注娱乐圈的我也是如雷贯耳，此人如今的名气甚至一
度超越身为2019年度之星的坤坤(当然是不好的方面)；想当年，坤坤靠一曲鸡你太美变态出道，
成为全网津津乐道的对象。而当今肖战则更胜一筹，个人实力什么的无所谓，只要粉
丝够多够无脑，我就是饭圈当之无愧的扛把子。&lt;/p&gt;
&lt;p&gt;本人亦有幸被肖战的粉丝 &lt;ruby&gt;&lt;rb&gt;临幸&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;攻击&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 过，其言语之粗鄙，其态度之恶劣，实在
是所有键盘侠的楷模。藉此次大作业的机会，我决定爬一爬肖战的微博，研究一下他
粉丝的构成。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;详细(实现具有时效性，一段时间后可能失效)&lt;/h2&gt;
&lt;p&gt;按照软件工程的说法，首先要对目标进行可行性分析(避免技术力不足造成的尴尬)。我
了解到微博有三个域名：m.weibo.cn, weibo.com。其中 是旧时代的遗物，页面简单，
但信息少；在三个域名中是最好爬的。m.weibo.cn是手机端的页面，信息足够。
weibo.com则是微博的网页版，信息最多，但也最难爬(包含各种验证码、机器识别)，
自带劝退属性。考虑到这次做的只是一个玩具，那么答案已经呼之欲出了————m.weibo.cn，
就决定是你了！&lt;/p&gt;
&lt;p&gt;然后是对网页的json数据结构的解析。我的目标是获得肖战每一篇微博下的评论人的
信息，所以主要研究的是页面的跳转问题(微博-&amp;gt;评论页-&amp;gt;评论人个人信息页)。&lt;/p&gt;
&lt;p&gt;程序的入口是肖战的 &lt;a class="reference external" href="https://m.weibo.cn/u/1792951112?uid=1792951112&amp;amp;t=0&amp;amp;luicode=10000011&amp;amp;lfid=100103type%3D1%26q%3D%E8%82%96%E6%88%98"&gt;微博首页&lt;/a&gt;
这个主页有五个分类：主页，微博，视频，超话，相册；每个类有各自的containerid。
由此可知有containerid就能跳转到相应的分类。手机端的微博页并不是将所有微博一次
全部显示出来，而是隐式的将x条微博划分为一页。易知手机的操作方式是往下划动，
所以这里的翻页方式是当滚动条划动到接近当页最后一条微博时请求下一页的所有微博
信息。而每一页微博会有一个since_id指向下一页，所以翻页的方式就很浅显了。
每条微博有专有的id，一条微博的评论页可以通过id获取；评论的翻页方式与微博相同，
不过参数是max_id。&lt;/p&gt;
&lt;p&gt;数据可视化使用了pyecharts库，很简单，很好用， &lt;a class="reference external" href="http://gallery.pyecharts.org/#/README"&gt;官方文档&lt;/a&gt; 的介绍非常详尽&lt;/p&gt;
&lt;p&gt;大抵的思路就是这样，下面看下结果。&lt;/p&gt;
&lt;p&gt;虽然只有8000个样本，但也足以初见端倪&lt;/p&gt;
&lt;img alt="性别统计" class="img-responsive" src="//tooisorahe.com/images/gender.PNG"/&gt;
&lt;p&gt;性别是没有悬念的，至于那10%的男性身份也很好推定。&lt;/p&gt;
&lt;img alt="热力图" class="img-responsive" src="//tooisorahe.com/images/geoHeat.PNG"/&gt;
&lt;p&gt;粉丝的地理分布，北上广深没得跑，意外的是川渝也很密集。&lt;/p&gt;
&lt;img alt="世代统计" class="img-responsive" src="//tooisorahe.com/images/generation.PNG"/&gt;
&lt;p&gt;从肖战粉丝的言论看来，这样的世代分布很合理，毕竟是后浪嘛。
不过最令我惊讶的是居然还有5%的10后...真-后浪。&lt;/p&gt;
&lt;img alt="注册时间" class="img-responsive" src="//tooisorahe.com/images/signup.PNG"/&gt;
&lt;p&gt;2009年8月14日，新浪微博开始内测。&lt;/p&gt;
&lt;img alt="词频" class="img-responsive" src="//tooisorahe.com/images/frequency.PNG"/&gt;
&lt;p&gt;得益于现在强大的控评和公关，并没有什么参考价值&lt;/p&gt;
&lt;p&gt;写这东西大概用时三天，上课边摸边写的，程序本身没有任何难度，逻辑也非常简单；
如果硬要说有坑的话，大概是手机端的微博经常会出现莫名其妙的丢包导致返回不正确
的json数据，在必要的地方加异常处理就可以完美解决。还有就是请求频率不能过快,
否则会被小棺家封号...解决方案是上某宝买点小号建个账号池，如果被封换个Cookie就
完事了。&lt;/p&gt;
&lt;p&gt;虽然只是个小玩具，但基本达到了目的。至于结论，不用多说也心知肚明，笑一笑就好。&lt;/p&gt;
&lt;div align="left" class="embed-responsive embed-responsive-16by9"&gt;&lt;embed allowfullscreen="allowfullscreen" class="embed-responsive-item" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts" scrolling="no" src="https://player.bilibili.com/player.html?bvid=1FV411d7u7&amp;amp;page=1&amp;amp;as_wide=1&amp;amp;high_quality=1&amp;amp;danmaku=1"/&gt;&lt;/div&gt;&lt;p&gt;看的我真是无地自容&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="toy"></category><category term="python"></category></entry><entry><title>丐版池塘夜雨</title><link href="//tooisorahe.com/raining-pool-poor-ver.html" rel="alternate"></link><published>2020-03-30T17:00:00+00:00</published><updated>2020-03-30T17:00:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2020-03-30:/raining-pool-poor-ver.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;因为对图形学比较感兴趣，前段时间陆续看了fundamentals of computer graphics、raytracing系列，了解了一些
图形学的基础知识，也手撸了一遍光追(丐中丐版)。出来的图的效果 &lt;del&gt;看着还行&lt;/del&gt; ：img，img。&lt;/p&gt;
&lt;p&gt;如前面所写的，我之前所了解的都是图形学中离线渲染的部分。众所周知，虽然ray tracing所呈现的效果相对真实，但
如果不加一些黑魔法优化的话，效率简直不能看。上面的结果每像素1000samples，用时5min..效率感人。离线渲染坑太
多，不是一时半会儿可以搞定的；图形学中还有另外一个分支实时渲染，就像名字中所描述的，效率大都能做到实时，也是
游戏开发的主力，但相对于基本遵循物理定律的光追，真实度方面肯定有所差距。&lt;/p&gt;
&lt;p&gt;之前看到过文刀秋二大大的 &lt;a class="reference external" href="https://www.zhihu.com/question/29504480/answer/44764493"&gt;一篇文章&lt;/a&gt; ，正好这
学期了解了数据结构，与文中的背景基本相似。虽然大作业的题目并不是文中的“池塘夜雨”，但由于学校出的题目过于无聊，
索性就尝试一下，顺便学习一些实时渲染方面的知识。&lt;/p&gt;
&lt;p&gt;先放上结果：&lt;/p&gt;
&lt;img alt="池塘夜雨" class="img-responsive" src="//tooisorahe.com/images/rainingpool.PNG"/&gt;
&lt;p&gt;完成了：天空盒、基本的水面效果 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;因为对图形学比较感兴趣，前段时间陆续看了fundamentals of computer graphics、raytracing系列，了解了一些
图形学的基础知识，也手撸了一遍光追(丐中丐版)。出来的图的效果 &lt;del&gt;看着还行&lt;/del&gt; ：img，img。&lt;/p&gt;
&lt;p&gt;如前面所写的，我之前所了解的都是图形学中离线渲染的部分。众所周知，虽然ray tracing所呈现的效果相对真实，但
如果不加一些黑魔法优化的话，效率简直不能看。上面的结果每像素1000samples，用时5min..效率感人。离线渲染坑太
多，不是一时半会儿可以搞定的；图形学中还有另外一个分支实时渲染，就像名字中所描述的，效率大都能做到实时，也是
游戏开发的主力，但相对于基本遵循物理定律的光追，真实度方面肯定有所差距。&lt;/p&gt;
&lt;p&gt;之前看到过文刀秋二大大的 &lt;a class="reference external" href="https://www.zhihu.com/question/29504480/answer/44764493"&gt;一篇文章&lt;/a&gt; ，正好这
学期了解了数据结构，与文中的背景基本相似。虽然大作业的题目并不是文中的“池塘夜雨”，但由于学校出的题目过于无聊，
索性就尝试一下，顺便学习一些实时渲染方面的知识。&lt;/p&gt;
&lt;p&gt;先放上结果：&lt;/p&gt;
&lt;img alt="池塘夜雨" class="img-responsive" src="//tooisorahe.com/images/rainingpool.PNG"/&gt;
&lt;p&gt;完成了：天空盒、基本的水面效果(折射反射)、波纹、pbr光照地形、雨点(指雪花)&lt;/p&gt;
&lt;p&gt;环境需求：OpenGL3.3-32bit，相对应的GLFW，glm0.9&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;下面记录一下实现时卡住的地方&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;雨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记得我是从雨点开始着手这个程序的；一开始想用Geometry Shader给整成粒子特效，写出来之后发现跟想象的效果的差距
有点大，粒子完全就是个像素点，一点都不像雨；思来想去没有头绪，干脆直接用三角形画个球代替一下，于是就有了现在
这样圆形的雨(其实连飘落方式也给写成雪的形式了，或许叫池塘夜雪更合适- -)。思路比较简单，实时渲染中的物体实际是由无
数个三角形面片组成的，所以只需想象一下把N个三角形近似成一个球就明白了。想要OpenGL画一个模型，需要提供模型的顶点
数据，所以问题就变成给定球心和半径，求球面的任意一点的坐标。这时可以将球像地球仪一样按经线和纬线分割；经过切割
后球面可被近似看为由N个矩形组成，一个矩形又由两个三角形组成；计算实际就是球坐标转笛卡尔坐标。灵魂画图：&lt;/p&gt;
&lt;img alt="样例" class="img-responsive" src="//tooisorahe.com/images/sample.PNG"/&gt;
&lt;p&gt;需要注意的是OpenGL中渲染三角形时按照顶点的顺序来区分正反面，默认逆时针为正面，顺时针为反面；在下面的反射会
用到。球坐标中的θ∈[0, π]， φ∈[0,2π]，代码如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;void GetPoint(std::vector&amp;lt;float&amp;gt;&amp;amp; p,float u, float v, float r) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    constexpr float pi = glm::pi&amp;lt;float&amp;gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    float z = r * std::cos(pi * u);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    float x = r * std::sin(pi * u) * std::cos(2 * pi * v);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    float y = r * std::sin(pi * u) * std::sin(2 * pi * v);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    p.push_back(x);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    p.push_back(y);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    p.push_back(z);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    p.push_back(u);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    p.push_back(v);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(std::vector&amp;lt;float&amp;gt;&amp;amp; vertex, size_t longitude, size_t latitude, float r) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    float longitude_step = 1.0f / longitude;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    float latitude_step = 1.0f / latitude;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    size_t offset = 0;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    for (size_t lo = 0; lo &amp;lt; longitude; lo++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;        for (size_t lat = 0; lat &amp;lt; latitude; lat++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;            std::vector&amp;lt;float&amp;gt; point1, point2, point3, point4;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;            GetPoint(point1,lo * longitude_step, lat * latitude_step, r);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;            GetPoint(point2,(lo + 1) * longitude_step, lat * latitude_step, r);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;            GetPoint(point3,(lo + 1) * longitude_step, (lat + 1) * latitude_step, r);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;            GetPoint(point4,lo * longitude_step, (lat + 1) * latitude_step, r);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;第二个解决的是天空盒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://learnopengl.com/PBR/IBL/Diffuse-irradiance"&gt;这里&lt;/a&gt; 的介绍非常详尽。需要注意的是
从Equirectangular Map转换到Cube Map时每次循环都要glclear清一下深度和颜色缓冲...之前就是因为漏写了这一句调试了一下午..
说多了都是泪。&lt;/p&gt;
&lt;p&gt;解决了雨点和天空盒后，能看到的效果是一个飘雨的广袤世界，就像这样：(天空盒资源取自 &lt;a class="reference external" href="http://www.hdrlabs.com/sibl/archive.html"&gt;sIBL&lt;/a&gt; )&lt;/p&gt;
&lt;img alt="天空盒和雨" class="img-responsive" src="//tooisorahe.com/images/ame.PNG"/&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;池塘夜雨，总不能少了池塘。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初用的是视差贴图和法线贴图结合，效果也很不错；但视差贴图完全是视觉上的trick，并不是
真实的高度，而之后的水面的实现是在另一个平面上，与地形基本处于同一高度，两个平面的深度冲突会导致只能显示一个平面。
于是转为用displacement mapping实现；displacement mapping实际上就是根据高度图调整顶点位置，这样生成的地形的高度
是真实的，但缺点是如果面数不够生成的地形就会棱角分明，很难看。解决方法是增加面(三角形)的数量，但这样开销也会增大；
生成顶点的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;(size_t rowLen, size_t colLen) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    std::vector&amp;lt;glm::vec3&amp;gt; tv;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    std::vector&amp;lt;glm::vec2&amp;gt; te;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    size_t triangleNum = (rowLen - 1) * (colLen - 1) * 2;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    double d = 2.0 / rowLen;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    for (double z = -1.0; z &amp;lt; 1.0; z += d) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;            for (double x = -1.0; x &amp;lt; 1.0; x += d) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;                    tv.push_back(glm::vec3(x, 0.0, z));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;                    te.push_back(glm::vec2((x + 1.0) * 0.5, (z + 1.0) * 0.5)); // [-1.0,1.0]-&amp;gt;[0.0,1.0]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;            }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;题图为1023*1023*2个三角形，再加上法线贴图的效果。光照用了pbr+IBL， &lt;a class="reference external" href="https://learnopengl.com/PBR/Theory"&gt;这个教程&lt;/a&gt;
写的太好了，真正的 &lt;del&gt;简单&lt;/del&gt; 易懂。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;最后是水面，也是最复杂的了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用了平面反射来实现水面的反射效果，相比于Screen Space Reflection(SSR)和对cube map采样在
效率和效果上都有优势。SSR的原理是获取当前视空间的深度、法线等信息，然后在后处理阶段通过深度信息得出场景中物体的位置,再
通过光线步进的方式获取反射颜色。方式是从当前点出发，沿着反射方向步进直到碰到物体为止；反射方向可以由法线得到，物体碰撞
则用深度来判断；缺点也很明显，既然只有当前视空间的深度、法线信息，那视空间之外的物体肯定是没有反射了。因此在室外的场景
很容易出现反射缺失的情况。另一种反射方案是将当前场景渲染6次到一个cube map上，再对cube map采样；只是看描述就知道这玩意
开销有多大了，每帧6次..简单的场景还好说，复杂一点直接gg。&lt;/p&gt;
&lt;p&gt;而平面反射的原理是将正常camera变换到对称与平面的位置，再用对称相机渲染场景一次作为reflect texture，然后对这个texture
采样就得到反射效果。要将正常camera转换到对称位置，需要一个反射矩阵，下面是公式推导和代码实现。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Planar Reflection&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;blockquote&gt;
&lt;img alt="Planar Reflection" class="img-responsive" src="//tooisorahe.com/images/planar.PNG"/&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;glm::mat4 result = glm::mat4(1.0);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    float d = -glm::dot(normal, p);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[0][0] = 1.0 - 2 * normal.x * normal.x;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[0][1] = -2 * normal.x * normal.y;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[0][2] = -2 * normal.x * normal.z;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[0][3] = -2 * normal.x * d;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[1][0] = -2 * normal.x * normal.y;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[1][1] =  1.0 - 2 * normal.y * normal.y;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[1][2] = -2 * normal.y * normal.z;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[1][3] = -2 * normal.y * d;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[2][0] = -2 * normal.x * normal.z;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[2][1] = -2 * normal.z * normal.y;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[2][2] = 1 - 2 * normal.z * normal.z;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[2][3] = -2 * normal.z * d;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[3][0] = 0;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[3][1] = 0;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[3][2] = 0;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    result[3][3] = 1;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将获得的反射矩阵在观察空间中变换即可(先乘view再乘reflect)；但这并不是最终结果。当物体在平面下时，反射贴图本应不显示物体
的反射虚像，但由于camera的frustum是下图的形式，所以依然会显示虚像，视觉上的效果是物体翻了个面。解决方法是将frustum的近
平面与反射平面平齐。如下，参考了 &lt;a class="reference external" href="http://www.terathon.com/lengyel/Lengyel-Oblique.pdf"&gt;这个&lt;/a&gt;&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
FrustumClipping&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;blockquote&gt;
&lt;img alt="FrustumClipping" class="img-responsive" src="FrustumClipping.png"/&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;glm::vec4 viewSpacePlane = glm::transpose(glm::inverse(reflectView)) * plane;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    glm::vec4 ViewSpaceFraPlanePoint = glm::transpose(glm::inverse(projection)) * glm::vec4(sign(viewSpacePlane.x), sign(viewSpacePlane.y), 1, 1);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    glm::vec4 M4 = glm::vec4(projection[3][0], projection[3][1], projection[3][2], projection[3][3]);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    auto u = 2.0f * (glm::dot(M4,ViewSpaceFraPlanePoint) / glm::dot(ViewSpaceFraPlanePoint, viewSpacePlane));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    auto newViewSpaceNearPlane = u * viewSpacePlane;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    auto M3 = newViewSpaceNearPlane - M4;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    //glm::vec4 M3 = 2.0f * (glm::dot(M4, ViewSpaceFraPlanePoint) / glm::dot(plane, ViewSpaceFraPlanePoint) * C) - M4;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    projection[0][2] = M3.x;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    projection[1][2] = M3.y;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    projection[2][2] = M3.z;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    projection[3][2] = M3.w;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;数据结构的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写了个循环队列来控制雨点和波纹的逻辑；每一次渲染循环将雨点出队，修改位置后在入队；如果已经飘落到湖面上则重置雨点位置，然后
往波纹队列中增加一个波纹(在雨点飘落的位置)。同时将波纹出队，判断生命周期是否结束后入队。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;为什么是丐版？&lt;/p&gt;
&lt;p&gt;因为真的就只是把文刀秋二大佬文章中的features做了出来而已..全部代码大概1000行多点， &lt;del&gt;完全就是屎山&lt;/del&gt; ;最终效果一般而且
还有一些bug&lt;/p&gt;
&lt;p&gt;一共用了一个月左右，不得不提OpenGL的api简直就是反直觉，用起来总感觉膈应，而且也非常底层，什么都要自己写的感觉实在是酸爽..
最后就是写shader的时候没有任何语法联想，出错了只能看那短短几行的错误输出来定位..还好这次的shader并不复杂。&lt;/p&gt;
&lt;p&gt;要说有什么实质性的收获的话，&lt;del&gt;学会了如何调节单机游戏里的图形选项在一般的硬件上以最好画质运行&lt;/del&gt; 代码水平提升了！&lt;/p&gt;
&lt;p&gt;仓促间写的总结，应该会有很多纰漏，还有一些点也没来得及写出来。学校的作业还没写完，然而我又想玩游戏了；；总之有时间再改吧&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="toy"></category><category term="c++"></category><category term="cg"></category></entry><entry><title>为了忘却的记忆</title><link href="//tooisorahe.com/for-the-memory-that-has-been-forgotten.html" rel="alternate"></link><published>2019-08-25T22:10:00+00:00</published><updated>2019-08-25T22:10:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2019-08-25:/for-the-memory-that-has-been-forgotten.html</id><summary type="html">&lt;div class="section" id="ti9"&gt;
&lt;h2&gt;TI9的完美落幕&lt;/h2&gt;
&lt;p&gt;几个小时前，在中国上海的梅赛德斯奔驰场馆内，OG在BO5的总决赛中以3：1的比分击败Liquid，夺得
TI9的冠军，也借此成为TI九年历史中的第一个双冠队伍，恭喜OG。&lt;/p&gt;
&lt;img alt="OG" class="img-responsive" src="//tooisorahe.com/images/ti9og.jpg"/&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;看完最后的比赛，刷Max+时无意间刷到了这篇文章：
&lt;a class="reference external" href="http://api.xiaoheihe.cn/maxnews/app/share/detail/1229894"&gt;如果你对Dota仍有爱意，请将TI9留在风中.&lt;/a&gt;
虽然与文章作者算是差了一个时代，但仍有不少相似的地方。再想到自己已经很久没有主动地打开这个游戏，激动之余也有些许感伤，
就趁这个机会写一些文字记录下我的Dota旅程，为这个贯穿我整个青春的游戏留下美好的回忆。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;起点&lt;/h2&gt;
&lt;p&gt;最初接触到这个游戏，是在2012年小学升初中的暑假。而写下这段话的时间已是2019年，我也从一个准中学生转变成了大学生。7年，
这是这个游戏陪伴我的时间，现在回想起来真是一段不可思议的时光。&lt;/p&gt;
&lt;p&gt;小学升初中的暑假，由于小学生所知的娱乐方式比较少，大概是比较无聊的。记得那也是一个无聊的下午，大我三岁堂哥来家里玩，
一进门就迫不及待地掏出u盘插到电脑上：“来看好康的！” 然后打开了一个叫魔兽争霸3：冰封王座的游戏，开始玩里面的官方地图。
被疯狂人机虐了几盘之后————多操对那时的我们来说可能稍微有点困难 &lt;del&gt;现在还是打不过&lt;/del&gt; ————我哥显得有些无趣之余，打开了
一幅新地图：DOTA6.73AI，我的Dota之路从此开始。&lt;/p&gt;
&lt;img alt="DotA6.73" class="img-responsive" src="//tooisorahe.com/images/DotA6.73.jpg"/&gt;
&lt;p&gt;当看到上面这张载入图片时，我已被深深地吸引 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="ti9"&gt;
&lt;h2&gt;TI9的完美落幕&lt;/h2&gt;
&lt;p&gt;几个小时前，在中国上海的梅赛德斯奔驰场馆内，OG在BO5的总决赛中以3：1的比分击败Liquid，夺得
TI9的冠军，也借此成为TI九年历史中的第一个双冠队伍，恭喜OG。&lt;/p&gt;
&lt;img alt="OG" class="img-responsive" src="//tooisorahe.com/images/ti9og.jpg"/&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;看完最后的比赛，刷Max+时无意间刷到了这篇文章：
&lt;a class="reference external" href="http://api.xiaoheihe.cn/maxnews/app/share/detail/1229894"&gt;如果你对Dota仍有爱意，请将TI9留在风中.&lt;/a&gt;
虽然与文章作者算是差了一个时代，但仍有不少相似的地方。再想到自己已经很久没有主动地打开这个游戏，激动之余也有些许感伤，
就趁这个机会写一些文字记录下我的Dota旅程，为这个贯穿我整个青春的游戏留下美好的回忆。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;起点&lt;/h2&gt;
&lt;p&gt;最初接触到这个游戏，是在2012年小学升初中的暑假。而写下这段话的时间已是2019年，我也从一个准中学生转变成了大学生。7年，
这是这个游戏陪伴我的时间，现在回想起来真是一段不可思议的时光。&lt;/p&gt;
&lt;p&gt;小学升初中的暑假，由于小学生所知的娱乐方式比较少，大概是比较无聊的。记得那也是一个无聊的下午，大我三岁堂哥来家里玩，
一进门就迫不及待地掏出u盘插到电脑上：“来看好康的！” 然后打开了一个叫魔兽争霸3：冰封王座的游戏，开始玩里面的官方地图。
被疯狂人机虐了几盘之后————多操对那时的我们来说可能稍微有点困难 &lt;del&gt;现在还是打不过&lt;/del&gt; ————我哥显得有些无趣之余，打开了
一幅新地图：DOTA6.73AI，我的Dota之路从此开始。&lt;/p&gt;
&lt;img alt="DotA6.73" class="img-responsive" src="//tooisorahe.com/images/DotA6.73.jpg"/&gt;
&lt;p&gt;当看到上面这张载入图片时，我已被深深地吸引。第一盘是我哥玩的，隐约记得是名为鱼人夜行者的英雄，最后结果已经模糊不清，
只记得我迫不及待要玩上一盘的模样。Dota1时代是在12个酒馆中挑选英雄，每个酒馆的英雄的主属性都不同，名字也很有“感觉”，譬如
暮色酒馆，曙光酒馆之类的。初次接触，那些名字令我眼花缭乱，就选了“先知”————看起来比较厉害。被电脑杀了几次后这盘游戏毫无悬念
地落败，记得我是在近卫军团，眼看着自己的世界之树被拆掉是真的很不甘心，但那时的我应该真的爱上了这个游戏。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;朋友们&lt;/h2&gt;
&lt;p&gt;一个游戏的生命力在于玩它的人数。Dota也是一个多人游戏，如果只能与电脑博弈，我对它的热爱也不会到如此程度。&lt;/p&gt;
&lt;p&gt;暑假结束后，我正式开始了我的初中生活。在一次玩闹中，不记得是谁无意间提起了这个游戏，在一瞬间发现一群志同道合的朋友，
真的很开心。蒜蓉、伟伟、大师、大葱、浩楚、大亦，直到现在都是我最好的朋友。&lt;/p&gt;
&lt;p&gt;现在回想初中的生活是真的非常“精彩”。记得当时教师机是固定在教室的，那么它所带来的结果就很显然了———放学后其他班的教室很快就空了，
只有我们班还有几个人围着讲台不知道在捣鼓什么。电脑只有一台，还要提防没走的班主任和级长，分工也已明确。 &lt;del&gt;如果这算是坏事的话，
不知道自习课时打开投影全程大屏幕直播和在图书馆上机区五人连坐美名其曰“绿色wb”要怎么定义。&lt;/del&gt; 无论好坏与否，这在那个电脑
被管制使用的年纪，是非常难得的娱乐时间。&lt;/p&gt;
&lt;img alt="PlayDota" class="img-responsive" src="//tooisorahe.com/images/11.png"/&gt;
&lt;img alt="Memory" class="img-responsive" src="//tooisorahe.com/images/memory2.jpg"/&gt;
&lt;p&gt;翻了翻旧手机找出上面两张图片，第一张是开黑截图，第二张是周末通宵。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;时代的变迁&lt;/h2&gt;
&lt;p&gt;上高中之后，考上不同高中的我们仍保持着频繁的联系。此外，Dota2的Ti已经举办了五届，整体质量也在不断提高，Dota1玩家源源不断地
加入到Dota2阵营，我们当然也在其中。毕竟Dota1整体基于War3的引擎，画质已经跟不上时代。而Dota2沿袭了原本玩法的同时不仅画质有
很大的提高，还提供了比较完善的管理，随意退出的情况的到了遏制。在这之外还加入了饰品系统
&lt;del&gt;当初听说Dota2不花钱，现在全家都怀疑我吸毒.jpg&lt;/del&gt; 。
有一段时间我也对饰品抱有相当的兴趣，不过这大概是现在我对Dota2失去情热的原因之一吧。起初，饰品的确带来了很大的新鲜感，增加
技能特效的同时还能令英雄模型更好看，饰品介绍上也会完善这个英雄的故事，这是很好的描述游戏背景的方式。但随着Valve不断推出新的
改变特效的饰品，上面的介绍也变得极其简短且重复。譬如说船长2017年的Ti本子奖励，把大招的幽灵船改成了鲨鱼，特效是做足了，但却
使这个游戏的独有魅力渐渐消散。Dota是英文DEFENCE OF THE ANCIENTS的缩写，翻译过来为“古代遗迹保卫战”，这样大规模的特效改变，
使得游戏的整体风格也随之改变。我想要的“感觉”，具体来说应该是“史诗一般的战斗”，而游戏中的人物要有合格的故事之余，还要有与之相称
的背景才能称作史诗。文字说明可能不够准确，&lt;del&gt;很残念语文作文从来没上过50&lt;/del&gt; 由于电脑下面是几张Dota1仍在更新时的载入图片。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
DotA6.49-6.54&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="DotA6.49-6.54" class="img-responsive" src="//tooisorahe.com/images/DotA6.49-6.54.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
DotA6.55-6.62&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="DotA6.55-6.62" class="img-responsive" src="//tooisorahe.com/images/DotA6.55-6.62.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
DotA6.63-6.68&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="DotA6.63-6.68" class="img-responsive" src="//tooisorahe.com/images/DotA6.63-6.68.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
DotA6.70-6.72&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="DotA6.70-6.72" class="img-responsive" src="//tooisorahe.com/images/DotA6.70-6.72.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Dota6.75-6.81&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Dota6.75" class="img-responsive" src="//tooisorahe.com/images/Dota6.75.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;每一张都能带给我身临其境的感觉，相当震撼。
虽然Dota2的画质有很大的提升，但少了点“感觉”
所以就我个人而言，Dota2在某种程度上的确失去了一些东西。&lt;/p&gt;
&lt;p&gt;第二个原因则是游戏性上的问题。从Dota1到Dota2，这之间经历了无数个版本的迭代；但无论是地图大改，还是英雄重做，都不会改动的是
游戏的随机性；这也是卡牌游戏风靡的原因。一次抽卡，就可以改变一局游戏的结局， :del: &lt;cite&gt;ドロー‼&lt;/cite&gt;　无限的可能性总是令人心驰神往。
在Dota中也一样，大部分英雄都有着被动技能，也就是概率触发。这类技能一般与暴击、眩晕效果挂钩，这也是它能扭转战局的原因。对我
来说，印象最深的被动技能无疑是混沌骑士(Chaos Knight, CK)的被动“混沌一击”。在我刚入坑的那个版本，这个被动升到满级后有11%的
概率打出4倍暴击，而且还是个小技能。而我在一篇总结帖中了解到，在远古版本时这个被动甚至还有额外的效果：%1的概率打出11倍暴击。
血条消失很好地诠释了这个技能的效果。试想，在一次团战中突然打出了一次这样的效果，该是多么的令人兴奋！当然这是不平衡的，要改。
这就是游戏的竞技性与娱乐性的冲突(我认为)，竞技性要求大部分东西是可控的，你这样做了，那就会得到对应的结果，对于现在如火如荼
的职业比赛来说，没有一个战队想要一次戏剧性的意外，毕竟那是吃饭的家伙。而娱乐性就如同上面所说的，讲究随机(也有不少人认为竞技
就是娱乐，但这是我个人对游戏的认识)。比赛能带动游戏热度，v社作为运营商也不是傻子，战略围绕比赛是理所当然的。带来的结果就是
前几个版本的更新中几个英雄的被动不再是概率触发，而是cd后必定触发，CK也在其列。改动面向比赛，这是趋势，但对我而言这多少会让
我觉得这个游戏没那么好玩了。&lt;/p&gt;
&lt;p&gt;上面两条也是我现在选择游戏的标准。剧情，自由度排在首位，画质其次。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;如果从最初的起点算起，Dota已经走过了15个年头(遗憾的是我没能经历那段时光，下面是远古大神整理的资料)。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dota.uuu9.com/201005/61665.shtml"&gt;Dota史前掠影 by云天逝水&lt;/a&gt;
&lt;a class="reference external" href="http://tieba.baidu.com/p/6112824497?share=9105&amp;amp;fr=share&amp;amp;see_lz=0&amp;amp;sfc=copy&amp;amp;client_type=2&amp;amp;client_version=10.3.8.12&amp;amp;st=1573391781&amp;amp;unique=22AE658F7E59F809B3FD5679FFD0FE3E"&gt;5.72-6.27更新日志 by HeavenFord&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以一款游戏来说，它的生命已经足够久远。近几年网路上也有不少声音认为它应该寿终正寝了，只看比赛不玩的“云玩家”数量也不断增长。
对于我来说，或许目送着它远去就是最好的告别方式了吧。但无论如何，即使我变成了 &lt;del&gt;已经是&lt;/del&gt; 所谓的“云玩家”，Dota也是我最爱的
游戏，偶尔跟朋友玩上几把，足够了。&lt;/p&gt;
&lt;p&gt;经历过Dota1时代的玩家想必不会对蛋疼集锦陌生，当时的直播行业并没有现在这么发达，主流的还是自制视频。蛋疼集锦是其中的佼佼者，可惜也
在两年前断更。而片头的音乐是堀江由衣演唱的&amp;lt;樱&amp;gt;，对当时的我来说，听见这一段音乐，就代表了欢乐时光的开始。&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;C:\myblog\content\life\for-the-memory-that-has-been-forgotten.zhs.rst&lt;/tt&gt;, line 140)&lt;/p&gt;
&lt;p&gt;Unknown directive type "youku".&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. youku:: XMTU3NzEwMTA0

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;日々を振り返られる                    私になりたい&lt;/p&gt;
&lt;p&gt;桜、散る事                           見ないように生きようとした&lt;/p&gt;
&lt;p&gt;花開く夢さえ                         知らないままで...&lt;/p&gt;
&lt;/div&gt;
</content><category term="life"></category><category term="writing"></category></entry><entry><title>一个简单的BMP编码函数 TOYBMP()</title><link href="//tooisorahe.com/simple-c-function-bmp.html" rel="alternate"></link><published>2019-08-04T21:22:00+00:00</published><updated>2019-08-04T21:22:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2019-08-04:/simple-c-function-bmp.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;计算机图形学(CG)，是一种使用数学算法将二维或三维图形转化为计算机
显示器的栅格形式的科学。其主要的研究内容就是研究如何在计算机中表
示图形，以及利用计算机进行图形的计算、处理和显示。&lt;/p&gt;
&lt;p&gt;我对这个领域也有相当的兴趣。为了更好地学习图形学，我尝试写了
&lt;a class="reference external" href="https://github.com/NyaNekoplus/toybmp"&gt;TOYBMP()&lt;/a&gt; 。
以MIT协议发布。这个函数由C语言实现，可以将数据写入24-bit RGB
或 32-bit RGBA 无压缩的BMP。代码长度为25行。&lt;/p&gt;
&lt;p&gt;代码实现如下(&lt;a class="reference external" href="https://github.com/NyaNekoplus/toybmp/blob/master/toybmp.h"&gt;toybmp.h&lt;/a&gt;)：&lt;/p&gt;
&lt;img alt="" class="img-responsive" src="//tooisorahe.com/images/toybmp.PNG"/&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;用法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"toybmp.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;计算机图形学(CG)，是一种使用数学算法将二维或三维图形转化为计算机
显示器的栅格形式的科学。其主要的研究内容就是研究如何在计算机中表
示图形，以及利用计算机进行图形的计算、处理和显示。&lt;/p&gt;
&lt;p&gt;我对这个领域也有相当的兴趣。为了更好地学习图形学，我尝试写了
&lt;a class="reference external" href="https://github.com/NyaNekoplus/toybmp"&gt;TOYBMP()&lt;/a&gt; 。
以MIT协议发布。这个函数由C语言实现，可以将数据写入24-bit RGB
或 32-bit RGBA 无压缩的BMP。代码长度为25行。&lt;/p&gt;
&lt;p&gt;代码实现如下(&lt;a class="reference external" href="https://github.com/NyaNekoplus/toybmp/blob/master/toybmp.h"&gt;toybmp.h&lt;/a&gt;)：&lt;/p&gt;
&lt;img alt="" class="img-responsive" src="//tooisorahe.com/images/toybmp.PNG"/&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;用法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"toybmp.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;toybmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rgb.bmp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码输出此文件:&lt;/p&gt;
&lt;img alt="" class="img-responsive" src="//tooisorahe.com/images/rgb.bmp"/&gt;
&lt;p&gt;函数声明:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    \brief Save a RGB/RGBA image in BMP format.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    \param TOYBMP_OUTPUT Output stream (by default using file descriptor).&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    \param w Width of the image.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    \param h Height of the image.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    \param img Image pixel data in 24-bit RGB or 32-bit RGBA format.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    \param alpha Whether the image contains alpha channel.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;toybmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TOYBMP_OUTPUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;实现&lt;/h2&gt;
&lt;p&gt;简单介绍下实现要点。不同于PNG与JPG格式，BMP的实现并不复杂。其基本结构如下。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BitmapFileHeader 共14bit 描述bmp格式，显示文件大小&lt;/li&gt;
&lt;li&gt;BitmapInfoHeader 共40bit 描述位图的维度，色深，压缩方式&lt;/li&gt;
&lt;li&gt;BitmapData 位图像素数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在位图文件头中值得注意的是，Windows中的数据是倒着显示的。即如果
一段数据显示为36 00 04 00，则实际数据为00 04 00 36。&lt;/p&gt;
&lt;p&gt;在位图数据区中，由于位图信息头中的图像高度是正数，所以位图数据在文件中的排列
顺序是从左下角到右上角，以行为主序排列的。可以理解为标准的二维平面坐标系。
此外，24-bit RGB在BMP中按照BGR的顺序储存各通道的值。32-bit RGBA则按照BGRA
顺序储存。&lt;/p&gt;
&lt;p&gt;最后是对齐规则。在Windows中，默认扫描的最小单位是4byte，如果数据按此规则对齐
则获取数据的速度会大大加快。也因此，BMP要求每行数据的长度必须是4的倍数，如果
不够则需要在每行末尾补零(比特填充)。&lt;/p&gt;
&lt;p&gt;填充后每行的字节数可以表示为:
&lt;code class="code"&gt;
((宽度*位深+7)/​8+3)/​4&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;两张调试过程中的错误图片:&lt;/p&gt;
&lt;img alt="" class="img-responsive" src="//tooisorahe.com/images/err0.bmp"/&gt;
&lt;img alt="" class="img-responsive" src="//tooisorahe.com/images/err1.bmp"/&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="C"></category><category term="toy"></category></entry><entry><title>秋刀鱼</title><link href="//tooisorahe.com/cololabis-saira.html" rel="alternate"></link><published>2019-07-25T14:10:00+00:00</published><updated>2019-07-25T14:10:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2019-07-25:/cololabis-saira.html</id><content type="html">&lt;p&gt;秋刀鱼，学名Cololabis saira，由于其体形修长如刀，生产季节在秋天，故名秋刀鱼。
因其低廉的价格和相对还行的肉质而常年位于各种烧烤摊、食堂可选用鱼清单的榜首。&lt;/p&gt;
&lt;p&gt;以上介绍得自百度百科。&lt;/p&gt;
&lt;p&gt;我也是个秋刀鱼的狂热爱好者。曾尝试在学校食堂连续点一周红烧秋刀鱼， &lt;del&gt;只是因为食堂实在没啥好吃的了&lt;/del&gt; 。
当然这已经是过去的事了。&lt;/p&gt;
&lt;p&gt;一周前去食堂吃饭，按照惯例要了道秋刀鱼。第一条，还是熟悉的配方，还是熟悉的味道，当然还有熟悉
的吃法————因为秋刀鱼的骨头非常软，我吃的时候一般嚼都不带嚼，直接吞————，天知道那第二条是不是
什么变种货，骨头的硬度基本接近一般的淡水鱼类，我第一口就着了道。尝试了许久也不能将鱼刺咳出，
只好用强行吃饭咽下去。结果咽是咽下去了，但鱼骨也在喉咙上划了道口子。&lt;/p&gt;
&lt;p&gt;放假回家时顺路去医院照了个喉镜，结果啥也没查出来，但该膈应还是膈应。&lt;/p&gt;
&lt;p&gt;突然想起周杰伦有一首“七里香”，里面有一句：秋刀鱼的滋味，猫跟你都想了解。&lt;/p&gt;
&lt;p&gt;但我不想了解，暂时一点都不想&lt;/p&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/Bbp9ZaJD_eA"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;所谓一朝被蛇咬，十年怕井绳&lt;/p&gt;
</content><category term="life"></category><category term="writing"></category></entry><entry><title>装了一台学习()用pc</title><link href="//tooisorahe.com/new-pc.html" rel="alternate"></link><published>2019-06-08T22:30:00+00:00</published><updated>2019-06-08T22:30:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2019-06-08:/new-pc.html</id><summary type="html">&lt;p&gt;距离上次发博客，貌似又过了一个月的时间...&lt;/p&gt;
&lt;p&gt;目前是大一第二学期，说实在的，课是真的很多 &lt;del&gt;水课占一半&lt;/del&gt; 再加上还报了计算机二级和英语四级，对于本就不多
的时间来说无疑是雪上加霜。所幸计算机二级难度并不大，几周前已收到通过的信息，也算是减轻一些负担。&lt;/p&gt;
&lt;p&gt;回到正题。旧电脑已经陪伴我四年有余，日常看看网页，玩下dota2并没有什么问题，但在使用某些软件时就有些捉襟见肘了。
原因也很简单，X5570是在近10年前发售的，架构和工艺相较于现在落后太多，而4C8T在现在只能是中等偏下的水准。显卡则
是丐中丐的网吧拆机962 &lt;del&gt;浑身散发着图吧垃圾佬的气息&lt;/del&gt; ，很多游戏都只能在1080p的较低画质下运行。&lt;del&gt;这是最不能忍的地方&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在图吧和卡吧潜伏了几个月之后，经过对价格走势图的仔细研究，再结合自己的预算，得出第一套配置如下：&lt;/p&gt;
&lt;table border="0" class="docutils table borderless"&gt;
&lt;colgroup&gt;
&lt;col width="15%"/&gt;
&lt;col width="85%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.amd.com/en/products/cpu/amd-ryzen-7-2700x"&gt;AMD Ryzen™ 7 2700X&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.colorful.cn/product_show.aspx?mid=102&amp;amp;id=1645"&gt;GeForce® RTX 2080&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MOTHER BOARD&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://cn.msi.com/Motherboard/X470-GAMING-PLUS/Specification"&gt;X470 Chipset&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MONITOR&lt;/td&gt;
&lt;td&gt;Acer VG270U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;COMPUTER CASE&lt;/td&gt;
&lt;td&gt;Fractal Design …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;距离上次发博客，貌似又过了一个月的时间...&lt;/p&gt;
&lt;p&gt;目前是大一第二学期，说实在的，课是真的很多 &lt;del&gt;水课占一半&lt;/del&gt; 再加上还报了计算机二级和英语四级，对于本就不多
的时间来说无疑是雪上加霜。所幸计算机二级难度并不大，几周前已收到通过的信息，也算是减轻一些负担。&lt;/p&gt;
&lt;p&gt;回到正题。旧电脑已经陪伴我四年有余，日常看看网页，玩下dota2并没有什么问题，但在使用某些软件时就有些捉襟见肘了。
原因也很简单，X5570是在近10年前发售的，架构和工艺相较于现在落后太多，而4C8T在现在只能是中等偏下的水准。显卡则
是丐中丐的网吧拆机962 &lt;del&gt;浑身散发着图吧垃圾佬的气息&lt;/del&gt; ，很多游戏都只能在1080p的较低画质下运行。&lt;del&gt;这是最不能忍的地方&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在图吧和卡吧潜伏了几个月之后，经过对价格走势图的仔细研究，再结合自己的预算，得出第一套配置如下：&lt;/p&gt;
&lt;table border="0" class="docutils table borderless"&gt;
&lt;colgroup&gt;
&lt;col width="15%"/&gt;
&lt;col width="85%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.amd.com/en/products/cpu/amd-ryzen-7-2700x"&gt;AMD Ryzen™ 7 2700X&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.colorful.cn/product_show.aspx?mid=102&amp;amp;id=1645"&gt;GeForce® RTX 2080&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MOTHER BOARD&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://cn.msi.com/Motherboard/X470-GAMING-PLUS/Specification"&gt;X470 Chipset&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MONITOR&lt;/td&gt;
&lt;td&gt;Acer VG270U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;COMPUTER CASE&lt;/td&gt;
&lt;td&gt;Fractal Design Define R5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;本来已经打算六一那天狠赚东哥一笔，但考虑到之后要炼丹，2080的8g显存显然差点意思，于是决定把2080换成2080ti。&lt;/p&gt;
&lt;p&gt;预算就只有这么多，显卡加了那其他地方肯定要缩阿。想到我对CPU并没有很高的需求，只需要达到能让2080ti满载
的程度就行。再者，我对腾讯全家桶和各种网游并没有需求，那么牙膏厂就不用考虑了。至于理由..9400f只有6C6T，
而2600x可是有6C12T，多6T多开框框数着玩简直是excited啊！比辣鸡牙膏厂不知道高到哪里去了。AMD，YES！&lt;/p&gt;
&lt;img alt="AMD YES" class="img-responsive" src="//tooisorahe.com/images/amdyes.jpg"/&gt;
&lt;p&gt;最后下单的配置大概就是下面这个样子，还有一些杂七杂八的就不一一列了。&lt;/p&gt;
&lt;table border="0" class="docutils table borderless"&gt;
&lt;colgroup&gt;
&lt;col width="15%"/&gt;
&lt;col width="85%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.amd.com/en/products/cpu/amd-ryzen-5-2600x"&gt;AMD Ryzen™ 5 2600X&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://www.colorful.cn/product_show.aspx?mid=102&amp;amp;id=1562"&gt;GeForce® RTX 2080TI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MOTHER BOARD&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://cn.msi.com/Motherboard/X470-GAMING-PLUS/Specification"&gt;X470 Chipset&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MEMORY&lt;/td&gt;
&lt;td&gt;DDR4 2666&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SSD&lt;/td&gt;
&lt;td&gt;SN500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MONITOR&lt;/td&gt;
&lt;td&gt;Acer VG270U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;COMPUTER CASE&lt;/td&gt;
&lt;td&gt;Fractal Design Define R5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总结一下：机箱的牌子是分型工艺，同网上主流机箱对比后算是比较对我胃口的一款，没有多余的线条，风格简约，还
有喜闻乐见的大侧透。不过我对光污染没有什么好感，所以并没有上要交信仰税的马甲条，主机内就只有显卡有RGB，
整体看下来这个侧透也算是浪费了。唯一的不足大概就是太重了，装好后大概有十斤左右...显卡选择了七彩虹，售后应该
是几个大厂里做的最好的，支持个人送保也使购买20系花花卡有了保障，相比之下打人硕拒保嘉人为泰等等简直是臭名远
扬...另外因为X470有两个M.2接口，索性直接上了256g+500g的西数SN500，不用占用机箱空间。&lt;/p&gt;
&lt;p&gt;最后整机加起来大概是1.3
左右。因为要回校的缘故并没有过多测试，就玩了几小时种草很久的 &lt;del&gt;显卡&lt;/del&gt; 天国：拯救，不知道是不是优化太差，
全极致特效下在野外帧数轻松破百，而在城镇里只能勉强60帧。&lt;/p&gt;
&lt;p&gt;几个月的参考、对比，和贴吧dalao的交流，到昨天的一次点亮，其中不免有许多繁琐，
但我也从其中学到许多。因为四级考试的缘故，这篇文章只是忙里偷闲的赶工产物，不
过也仅仅用于记录对这段时间的感悟罢了。这个博客里life分类的文章大概都会如此。
四级后还有期末考试，这里大概又要荒废一段时间了(笑)。暑假应该就会有比较多的时
间了，到时应该就会把这段时间积压的想法一一付诸实现了吧。&lt;/p&gt;
</content><category term="life"></category><category term="newPC"></category></entry><entry><title>那些令我感到温暖的声音</title><link href="//tooisorahe.com/warm-voice.html" rel="alternate"></link><published>2019-05-09T21:20:00+00:00</published><updated>2019-05-09T21:20:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2019-05-09:/warm-voice.html</id><content type="html">&lt;p&gt;不知不觉距搭建好这个博客已有一段时间，然而这里还是空空荡荡。搭这个博客的意义是什麽呢？(自我怀疑中)&lt;/p&gt;
&lt;p&gt;这个博客目前有life和technology两个类别，life用於记录一些生活琐事，tech用於记录一些技术实现上的体会。
那麽这里长草的原因就很显然了——发不出技术博是因为太菜，发不出日常是因为每天都 &lt;del&gt;摸鱼&lt;/del&gt; 很忙。&lt;/p&gt;
&lt;p&gt;——为什麽这么忙？&lt;/p&gt;
&lt;blockquote&gt;
&lt;del&gt;垃圾水课gc课程表&lt;/del&gt; ！————来自一个 &lt;del&gt;被迫&lt;/del&gt; 使用游戏时间来敲代码的辣鸡的深深怨念&lt;/blockquote&gt;
&lt;p&gt;人在疲惫的时候总是需要一些放松的方式。&lt;/p&gt;
&lt;p&gt;敲完代码，时间已近 &lt;del&gt;断网时间&lt;/del&gt; 11点。看来今晚不能跟小伙伴们快乐dota了。打开某易云...&lt;/p&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/pXHJH71H3xY"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;人果然是因为这样的声音才活着的。这些或温暖，或充满元气的声音，总能令疲惫的身心得以放松。&lt;/p&gt;
&lt;p&gt;11：30，该睡觉了。明天又是 &lt;del&gt;摸鱼&lt;/del&gt; 美好的一天。&lt;/p&gt;
&lt;p&gt;Q：为什麽是Youtube？&lt;/p&gt;
&lt;p&gt;A：这首
&lt;a class="reference external" href="https://music.163.com/#/song?id=36270494"&gt;きみがくれたシャイニーストーリー&lt;/a&gt;
已被某易购买了版权，所以不能使用外链&lt;/p&gt;
</content><category term="life"></category><category term="music"></category><category term="writing"></category></entry><entry><title>你好 世界</title><link href="//tooisorahe.com/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B.html" rel="alternate"></link><published>2019-04-21T15:30:00+00:00</published><updated>2019-04-21T15:30:00+00:00</updated><author><name>Vincent Tsai</name></author><id>tag:tooisorahe.com,2019-04-21:/新的开始.html</id><content type="html">&lt;p&gt;由此启程...&lt;/p&gt;
</content><category term="life"></category><category term="Life"></category></entry></feed>